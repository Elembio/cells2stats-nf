/*
========================================================================================
    nf-core/wholegenomesequencing Nextflow base config file
========================================================================================
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

// Define constants to be reused
final String CPU_LABEL    = 'cpus'
final String TIME_LABEL   = 'time'
final String MEMORY_LABEL = 'memory'

process {
    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max(1    * task.attempt, CPU_LABEL) }
    memory = { check_max(6.GB * task.attempt, TIME_LABEL) }
    time   = { check_max(4.h  * task.attempt, MEMORY_LABEL) }

    // Error 104: Connection reset by peer.
    // Error 134: SIGABRT signal, failed explicit assertion, memory corruption, buffer overflow.
    // Error 137: SIGKILL signal, out-of-memory error.
    // Error 139: SIGSEGV signal, segmentation fault; process tried to access memory that was not allowed.
    // Error 143: SIGTERM signal, process ran out of time.
    errorStrategy = { task.exitStatus in [1, 104, 134, 137, 139, 143] ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel: process_single {
        Map<String, Closure> resources = dynamicRetryResources(500.MB, 10.m)
        cpus          = { check_max(1, CPU_LABEL) }
        memory        = resources.memory
        time          = resources.time
    }
    withLabel: process_low {
        Map<String, Closure> resources = dynamicRetryResources(1.GB, 1.h)
        cpus          = { check_max(1, CPU_LABEL) }
        memory        = resources.memory
        time          = resources.time
    }
    withLabel: process_medium {
        Map<String, Closure> resources = dynamicRetryResources(2.GB, 4.h)
        cpus          = { check_max(2, CPU_LABEL) }
        memory        = resources.memory
        time          = resources.time
    }
    withLabel: process_high {
        Map<String, Closure> resources = dynamicRetryResources(96.GB, 3.h)
        cpus          = { check_max(48, CPU_LABEL) }
        memory        = resources.memory
        time          = resources.time
    }
    withLabel: process_ultra_high {
        Map<String, Closure> resources = dynamicRetryResources(96.GB, 32.h)
        cpus          = { check_max(24, CPU_LABEL) }
        memory        = resources.memory
        time          = resources.time
    }
}
