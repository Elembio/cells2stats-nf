docker.enabled = true

params {
    // Container
    container_url = "147637153406.dkr.ecr.us-west-2.amazonaws.com/modules/cells2stats"
    container_tag = "0.2.4"

    // Run
    run_dir = null
    id = null

    // Cells2Stats
    batch = ""
    error_on_missing = false
    log_level = "info"
    max_unassigned = null
    no_error_on_invalid = false
    panel = null
    run_manifest = null
    skip_cellprofiler = false
    tile = ""
    well = ""
    visualization = false
    visualization_only = false
    segmentation = null

    // Boilerplate options
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    enable_conda               = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    
    // Max resources
    max_memory                 = '144.GB'
    max_cpus                   = 48
    max_time                   = '5.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

manifest {
    name            = 'elembio/cells2stats'
    author          = 'Carlos A Ruiz, Bryan R Lajoie'
    homePage        = 'https://gitlab.com/elembio/analysis/nextflow-workflows/cells2stats-nf'
    description     = 'Cell stats generation from Element AVITI24 System'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0.0'
}

profiles {
    docker {
        docker.enabled         = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    test { includeConfig 'conf/test.config' }
    local { includeConfig 'conf/local.config' }
    tower { includeConfig 'conf/tower.config' }
    tower_spot { includeConfig 'conf/tower_spot.config' }
    ElembioCloud { includeConfig 'conf/ElembioCloud.config'}
    notaskdir { includeConfig 'conf/notaskdir.config'}
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


// Define function to get dynamically increasing resources at each retry attempt
def dynamicRetryResources(baseMemory, baseTime) {
    return [
        memory: { ->
            task.exitStatus in [1, 137, 139]
                // Increase memory if errored out
                ? check_max(baseMemory * task.attempt, 'memory')
                // Base memory for normal execution
                : check_max(baseMemory, 'memory')
        },
        time: { ->
            task.exitStatus == 143
                // Increase time if timeout error (143)
                ? check_max(baseTime * task.attempt, 'time')
                // Base time for normal execution
                : check_max(baseTime, 'time')
        }
    ]
}

